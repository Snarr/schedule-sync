import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import EventCard from "../components/EventCard";
import { useState } from "react";

const EventCreator = (
  icon: string,
  eventName: string,
  timeRange: string,
  days: string
) => {
  return {icon, eventName, timeRange, days}
}

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const [events, setEvents] = useState([
    EventCreator("📲", "CIS 4515", "9:30 am - 10:50 am", "Monday, Tuesday, Wednesday"),
    EventCreator("📚", "IH 0852", "11:00 am - 12:20 am", "Tuesday, Thursday"),
    EventCreator("⚡", "PHYS 1061", "9:20 am - 10:30 am", "Tuesday, Thursday"),
    EventCreator("📊", "CIS 2033", "12:00 pm - 12:50 pm", "Monday, Wednesday, Friday"),
    EventCreator("🎉", "CIS 3603", "5:30 pm - 8:00 pm", "Monday"),
    EventCreator("🛠️", "Work", "6:30 pm - 9:50 pm", "Tuesday, Thursday, Friday"),
  ]);

  return (
    <>
      <Head>
        <title>Schedule Sync</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-full w-full flex-col items-center justify-center bg-white gap-2">
        Schedule Sync
        <div className="flex flex-col items-center gap-2 text-black">
          <p className="text-2xl">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p>
          <AuthShowcase />
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
